#!/bin/sh

PROGRAM=$(basename $0)
SUDO=sudo
COUNT="2"
COMMAND=""
BRNAME="tapbr0"
TAPNAME="tap"
TUNNAME=""
DEACTIVATE_IPV6=""
ENABLE_FORWARDING=0
BRIDGE_ADDRS=""
BRIDGE_ROUTES=""
DEFAULT_PREFIX_LEN=128
UPLINK=""
_USER="${USER}"

usage() {
    echo "usage: ${PROGRAM} [arguments]" >&2
    echo "" >&2
    echo "Defaults:"
    echo "   If no option is given, -c is assumed" >&2
    echo "" >&2
    echo "Options:" >&2
    echo "   -c [<num>], --create [<num>]: Create <num> tap interfaces (default: 2)" >&2
    echo "   -d, --delete:                 Delete all interface" >&2
    echo "   -l <iface>, --list <iface>:   If <iface> belongs to a bridge, list the bridge and" >&2
    echo "                                 all interfaces that belong to it. If <iface> does " >&2
    echo "                                 not belong to a bridge, just print <iface>." >&2
    echo "   -a <address>[/<prefix_len>], --address <address>[/<prefix_len>]:" >&2
    echo "                                 Address to add to the created bridge. Can be used" >&2
    echo "                                 multiple times." >&2
    echo "   -r <route>[/<prefix_len>] <next_hop>, --route <route>[/<prefix_len>] <next_hop>:" >&2
    echo "                                 Route to add to via the created bridge. Can be used" >&2
    echo "                                 multiple times." >&2
    echo "   -f, --forwarding              Enable forwarding system-wide on creation and " >&2
    echo "                                 disable on deletion." >&2
    echo "   --tun [<name>]                Create a single, unbridged TUN interface" >&2
    echo "                                 named <name>0 (default for <name>: tun)." >&2
    echo "                                 No bridge will be created in that case." >&2
    echo "                                 <name> will be ignored on OSX and FreeBSD." >&2
    echo "   -b <name>, --bridge <name>:   Give name for the bridge (default: tapbr)" >&2
    echo "   -t <name>, --tap <name>:      Name base for the tap interfaces; the" >&2
    echo "                                 generated names will be <name>x" >&2
    echo "                                 (default: tap; ignored on OSX and FreeBSD)" >&2
    echo "   -6, --deactivate-ipv6:        Deactivate IPv6 for the interfaces and bridge" >&2
    echo "                                 (ignored on OSX and FreeBSD)" >&2
    echo "   -u, --uplink:                 Optional uplink interface" >&2
    echo "                                 (ignored on OSX and FreeBSD)" >&2
    echo "   -U <user>, --user <user>      Set user for created interfaces" >&2
    echo "                                 (default: \$USER)" >&2
    echo "   -h, --help:                   Prints this text" >&2
}

. "$(cd "$(dirname "$0")" >/dev/null 2>&1 && pwd -P)"/functions.sh

get_master() {
    IFACE=$1
    case "${PLATFORM}" in
        Linux)
            MASTER=$(ip link show ${IFACE} 2>/dev/null | \
                     grep -o "master \S\+" | cut -d' ' -f2)
            ;;
        FreeBSD|OSX)
            for IF in $(ifconfig 2>/dev/null | \
                        grep -oiE "^[a-z0-9_-]+"); do
                if ifconfig $IF | grep -q "member: $IFACE"; then
                    MASTER=${IF}
                    break
                fi
            done
            ;;
        *)
            ;;
    esac
    if [ -z "$MASTER" ]; then
        # IFACE is its own master
        echo "$IFACE"
    else
        echo "$MASTER"
    fi
}

list_bridge() {
    BRIDGE=$1
    case "${PLATFORM}" in
        Linux)
            ip link show ${BRIDGE} > /dev/null || exit 1 ;;
        FreeBSD|OSX)
            ifconfig ${BRIDGE} > /dev/null || exit 1 ;;
        *)
            exit 1 ;;
    esac
    IFACES=0
    echo -n "$BRIDGE:"
    case "${PLATFORM}" in
        Linux)
            for IF in $(ls /sys/class/net/${BRIDGE}/brif 2> /dev/null); do
                echo ""
                echo -n "- $IF"
                IFACES=$(( ${IFACES} + 1 ))
            done
            ;;
        FreeBSD|OSX)
            for IF in $(ifconfig ${BRIDGE} | grep -oiE "member: .+ " | cut -d' ' -f2); do
                echo ""
                echo -n "- $IF"
                IFACES=$(( ${IFACES} + 1 ))
            done
            ;;
        *)
            ;;
    esac
    if [ "${IFACES}" -eq 0 ]; then
        echo " []"
    else
        echo ""
    fi
}

while true ; do
    case "$1" in
        -6)
            DEACTIVATE_IPV6=1
            shift ;;
        -a|--address)
            # check if valid address + optional prefix length
            if echo "$2" | grep -q "^[a-f0-9:]\+\(/[0-9]\+\)\?$"; then
                BRIDGE_ADDRS="${BRIDGE_ADDRS} $2"
                shift 2
            else
                usage
                exit 2
            fi ;;
        -b|--bridge)
            case "$2" in
                "")
                    usage
                    exit 2 ;;
                *)
                    BRNAME="$2"
                    shift 2 ;;
            esac ;;
        -c|--create)
            if [ -n "${COMMAND}" ]; then
                usage
                exit 2
            fi
            COMMAND="create"
            case "$2" in
                "")
                    shift ;;
                *[!0-9]*)
                    usage
                    exit 2;;
                *)
                    COUNT="$2"
                    shift 2 ;;
            esac ;;
        -d|--delete)
            if [ -n "${COMMAND}" ]; then
                usage
                exit 2
            fi
            COMMAND="delete"
            shift ;;
        -f|--forwarding)
            ENABLE_FORWARDING=1
            shift ;;
        -l|--list)
            if [ -n "${COMMAND}" ]; then
                usage
                exit 2
            fi
            COMMAND="list"
            case "$2" in
                "")
                    usage
                    exit 2 ;;
                *)
                    BRNAME="$2"
                    shift 2 ;;
            esac ;;
        -h|--help)
            usage
            exit ;;
        -r|--route)
            # check if valid address + optional prefix length
            if ! echo "$2" | grep -q "^[a-f0-9:]\+\(/[0-9]\+\)\?$"; then
                usage
                exit 2
            fi
            # check if valid next hop
            if ! echo "$3" | grep -q "^[a-f0-9:]\+$"; then
                usage
                exit 2
            fi
            BRIDGE_ROUTES="${BRIDGE_ROUTES} $2-$3"
            shift 3 ;;
        -u|--uplink)
            case "$2" in
                "")
                    usage
                    exit 2 ;;
                *)
                    UPLINK="$2"
                    shift 2 ;;
            esac ;;
        -U|--user)
            case "$2" in
                "")
                    usage
                    exit 2 ;;
                *)
                    id "$2" > /dev/null || exit 2
                    _USER="$2"
                    shift 2 ;;
            esac ;;
        -t|--tap)
            case "$2" in
                "")
                    usage
                    exit 2 ;;
                *)
                    TAPNAME="$2"
                    shift 2 ;;
            esac ;;
        --tun)
            case "$2" in
                "")
                    TUNNAME="tun"
                    shift 1 ;;
                *)
                    TUNNAME="$2"
                    shift 2 ;;
            esac ;;
        "")
            break ;;
        *)  usage
            exit 2 ;;
    esac
done

if [ -z "${COMMAND}" ]; then
    COMMAND="create"
fi
if [ "${COMMAND}" != "list" ]; then
    if ! command -v sudo 2>&1 > /dev/null; then
        echo "sudo command not found" >&2
        exit 1
    else
        echo "sudo required. Checking for permissions." >&2
        sudo true
        if [ "$?" -ne 0 ]; then
            echo "No sudo permissions" >&2
            exit 1
        fi
    fi
fi

if [ -n "${TUNNAME}" ]; then
    echo "Only creating/deleting TUN interface ${TUNNAME}0 but no bridge"
    COUNT=1
    BRNAME="${TUNNAME}0"
fi

if [ "${COMMAND}" = 'create' ]; then
    if [ -z "${TUNNAME}" ]; then
        create_bridge || exit 1
    fi

    begin_iface || exit 1

    for N in $(seq 0 "$((COUNT - 1))"); do
        create_iface || exit 1
    done

    activate_forwarding || exit 1
    if [ -z "${TUNNAME}" ]; then
        up_bridge || exit 1
    fi
    add_ipv6_addrs || exit 1
    add_ipv6_routes || exit 1

elif [ "${COMMAND}" = 'delete' ]; then
    del_ipv6_routes || exit 1
    del_ipv6_addrs || exit 1
    deactivate_forwarding || exit 1
    if [ -z "${TUNNAME}" ]; then
        delete_bridge
    else
        for N in $(seq 0 "$((COUNT - 1))"); do
            delete_iface "${TUNNAME}${N}"
        done
    fi
elif [ "${COMMAND}" = 'list' ]; then
    list_bridge $(get_master "$BRNAME") || exit 1
else
    echo 'unknown command'
    exit 1
fi

exit 0
